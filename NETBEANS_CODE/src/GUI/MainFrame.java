package GUI;

import java.awt.BorderLayout;
import java.awt.Image;
import java.io.IOException;
import java.io.InputStream;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class MainFrame extends javax.swing.JFrame {
    
private Connection conn;

public MainFrame(Connection conn) {
    this.conn = conn;
    initComponents();
    setLocationRelativeTo(null);
    setResizable(false);
    setTitle("Real-estate Firm Database System");
    InputStream inputStream = getClass().getResourceAsStream("main.jpg");
    try {
        Image image = ImageIO.read(inputStream);
        JLabel background = new JLabel(new ImageIcon(image));
        setLayout(null);
        background.setBounds(0, 0, getWidth(), getHeight());
        add(background);
    } catch (IOException e) {
        e.printStackTrace();
    }
    connectToSql();
}

public void connectToSql() {
  DefaultTableModel model = new DefaultTableModel();

  model = new DefaultTableModel();
  model.addColumn("Property ID");
  model.addColumn("Address");
  model.addColumn("City");
  model.addColumn("State");
  model.addColumn("Postcode");
  model.addColumn("Office Number");
  model.addColumn("Owner ID");
  model.addColumn("Owner Name");
  model.addColumn("Percent Owned");

  SQLTable.setModel(model);

  try {

    Statement stmt = conn.createStatement();
    ResultSet rs = stmt.executeQuery("SELECT Property.Property_ID, Address, City, State, Postcode, Property.Office_Number, Owner.Owner_ID, Owner_Name, Percent_Owned FROM Property JOIN Property_Owner ON Property.Property_ID = Property_Owner.Property_ID JOIN Owner ON Property_Owner.Owner_ID = Owner.Owner_ID");
    while (rs.next()) {
      model.addRow(new Object[] {
        rs.getInt("Property_ID"), rs.getString("Address"), rs.getString("City"), rs.getString("State"), rs.getString("Postcode"), rs.getInt("Office_Number"), rs.getInt("Owner_ID"), rs.getString("Owner_Name"), rs.getDouble("Percent_Owned")
      });
    }
  } catch (SQLException e) {
    JOptionPane.showMessageDialog(this, e.getMessage());

  }

}
     
private MainFrame() {
    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        exitButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        searchButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        insertButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        propertyIDInput = new javax.swing.JTextField();
        addressInput = new javax.swing.JTextField();
        stateInput = new javax.swing.JTextField();
        postcodeInput = new javax.swing.JTextField();
        officeNumberInput = new javax.swing.JTextField();
        percentInput = new javax.swing.JTextField();
        ownerNameInput = new javax.swing.JTextField();
        ownerIDInput = new javax.swing.JTextField();
        cityInput = new javax.swing.JTextField();
        clearButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        SQLTable = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        ownerDeleteInput = new javax.swing.JTextField();
        ownerDeleteButton = new javax.swing.JButton();
        refreshButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        exitButton.setText("EXIT");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        updateButton.setText("UPDATE");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        searchButton.setText("SEARCH");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("DELETE");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        insertButton.setText("INSERT");
        insertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setText("Real-estate Firm Database System");

        jLabel2.setText("Property ID");

        jLabel3.setText("Address");

        jLabel4.setText("City");

        jLabel5.setText("State");

        jLabel6.setText("Postcode");

        jLabel7.setText("Office Number");

        jLabel8.setText("Owner ID");

        jLabel9.setText("Owner Name");

        jLabel10.setText("Percent Owned");

        clearButton.setText("CLEAR");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        SQLTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        SQLTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SQLTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(SQLTable);

        jLabel11.setText("Delete Owner (Using ID)");

        ownerDeleteButton.setText("DELETE OWNER");
        ownerDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ownerDeleteButtonActionPerformed(evt);
            }
        });

        refreshButton1.setText("REFRESH");
        refreshButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel7))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(postcodeInput, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(stateInput, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(addressInput, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(propertyIDInput, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cityInput, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(officeNumberInput, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel11))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(ownerNameInput, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(ownerIDInput, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(percentInput, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ownerDeleteInput, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ownerDeleteButton)))
                        .addGap(0, 15, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(refreshButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addComponent(insertButton, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(21, 21, 21)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel9)
                    .addComponent(propertyIDInput, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ownerNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(addressInput, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ownerIDInput, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(percentInput, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(cityInput, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(stateInput, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel11)
                        .addComponent(ownerDeleteInput, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(ownerDeleteButton)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(postcodeInput, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(officeNumberInput, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(refreshButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(insertButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
System.exit(0);       
    }//GEN-LAST:event_exitButtonActionPerformed

    private void insertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertButtonActionPerformed
try {
    int propertyID = Integer.parseInt(propertyIDInput.getText());
    String address = addressInput.getText();
    String city = cityInput.getText();
    String state = stateInput.getText();
    String postcode = postcodeInput.getText();
    int officeNumber = Integer.parseInt(officeNumberInput.getText());
    String ownerName = ownerNameInput.getText();
    int ownerID = Integer.parseInt(ownerIDInput.getText());
    BigDecimal percentOwned = new BigDecimal(percentInput.getText());
    PreparedStatement stmt1 = conn.prepareStatement("SELECT COUNT(*) FROM Sales_Office WHERE Office_Number = ?");
    stmt1.setInt(1, officeNumber);
    ResultSet rs1 = stmt1.executeQuery();
    rs1.next();
    int officeCount = rs1.getInt(1);
    if (officeCount == 0) {
        PreparedStatement psSalesOffice = conn.prepareStatement("INSERT INTO Sales_Office VALUES (?, ?)");
        psSalesOffice.setInt(1, officeNumber);
        psSalesOffice.setString(2, address);
        psSalesOffice.executeUpdate();
    }
    PreparedStatement psProperty = conn.prepareStatement("INSERT INTO Property VALUES (?, ?, ?, ?, ?, ?)");
    psProperty.setInt(1, propertyID);
    psProperty.setString(2, address);
    psProperty.setString(3, city);
    psProperty.setString(4, state);
    psProperty.setString(5, postcode);
    psProperty.setInt(6, officeNumber);
    psProperty.executeUpdate();
    PreparedStatement stmt2 = conn.prepareStatement("SELECT COUNT(*) FROM Owner WHERE Owner_ID = ?");
    stmt2.setInt(1, ownerID);
    ResultSet rs2 = stmt2.executeQuery();
    rs2.next();
    int ownerCount = rs2.getInt(1);
    if (ownerCount == 0) {
        PreparedStatement psOwner = conn.prepareStatement("INSERT INTO Owner VALUES (?, ?)");
        psOwner.setInt(1, ownerID);
        psOwner.setString(2, ownerName);
        psOwner.executeUpdate();
    }
    PreparedStatement psPropertyOwner = conn.prepareStatement("INSERT INTO Property_Owner VALUES (?, ?, ?)");
    psPropertyOwner.setInt(1, propertyID);
    psPropertyOwner.setInt(2, ownerID);
    psPropertyOwner.setBigDecimal(3, percentOwned);
    psPropertyOwner.executeUpdate();
    JOptionPane.showMessageDialog(null, "Record inserted successfully.");
} catch (Exception ex) {
    JOptionPane.showMessageDialog(null, ex.getMessage());
}
connectToSql();
    }//GEN-LAST:event_insertButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
try {
    String dbType = conn.getMetaData().getDatabaseProductName();
    String updatePropertyOwner;
    int propertyID = Integer.parseInt(propertyIDInput.getText());
    String address = addressInput.getText();
    String city = cityInput.getText();
    String state = stateInput.getText();
    String postcode = postcodeInput.getText();
    int officeNumber = Integer.parseInt(officeNumberInput.getText());
    int ownerID = Integer.parseInt(ownerIDInput.getText());
    String ownerName = ownerNameInput.getText();
    double percentOwned = Double.parseDouble(percentInput.getText());
    String checkProperty = "SELECT Property_ID FROM Property WHERE Property_ID = ?";
    PreparedStatement checkStmt = conn.prepareStatement(checkProperty);
    checkStmt.setInt(1, propertyID);
    ResultSet checkRs = checkStmt.executeQuery();
    if (!checkRs.next()) {
        JOptionPane.showMessageDialog(null, "Property with ID " + propertyID + " does not exist in the database.");
        return;
    }
    String updateProperty = "UPDATE Property SET Address = ?, City = ?, State = ?, Postcode = ?, Office_Number = ? WHERE Property_ID = ?";
    PreparedStatement pstmt = conn.prepareStatement(updateProperty);
    pstmt.setString(1, address);
    pstmt.setString(2, city);
    pstmt.setString(3, state);
    pstmt.setString(4, postcode);
    pstmt.setInt(5, officeNumber);
    pstmt.setInt(6, propertyID);
    pstmt.executeUpdate();
    String checkOwner = "SELECT Owner_ID FROM Owner WHERE Owner_ID = ?";
    pstmt = conn.prepareStatement(checkOwner);
    pstmt.setInt(1, ownerID);
    ResultSet rs = pstmt.executeQuery();
    if (!rs.next()) {
        String insertOwner = "INSERT INTO Owner (Owner_ID, Owner_Name) VALUES (?, ?)";
        pstmt = conn.prepareStatement(insertOwner);
        pstmt.setInt(1, ownerID);
        pstmt.setString(2, ownerName);
        pstmt.executeUpdate();
    }
    if (dbType.equals("MySQL")) {
    updatePropertyOwner = "UPDATE Property_Owner po JOIN Owner o ON po.Owner_ID = o.Owner_ID SET po.Owner_ID = ?, po.Percent_Owned = ? WHERE po.Property_ID = ?";
    } else if (dbType.equals("Microsoft SQL Server")) {
        updatePropertyOwner = "UPDATE Property_Owner SET Owner_ID = ?, Percent_Owned = ? FROM Property_Owner po JOIN Owner o ON po.Owner_ID = o.Owner_ID WHERE po.Property_ID = ?";
    } else {
        JOptionPane.showMessageDialog(null, "Database not supported.");
        return;
    }
    pstmt = conn.prepareStatement(updatePropertyOwner);
    pstmt.setInt(1, ownerID);
    pstmt.setDouble(2, percentOwned);
    pstmt.setInt(3, propertyID);
    pstmt.executeUpdate();
    JOptionPane.showMessageDialog(null, "Property updated successfully.");
} catch (SQLException ex) {
    JOptionPane.showMessageDialog(null, "Error updating property: " + ex.getMessage());
} catch (NumberFormatException ex) {
    JOptionPane.showMessageDialog(null, "Please enter valid numbers for Property ID, Office Number, Owner ID, and Percent Owned.");
}

     connectToSql();
    }//GEN-LAST:event_updateButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
try {
    int propertyId = Integer.parseInt(propertyIDInput.getText());

    PreparedStatement stmt = conn.prepareStatement("SELECT Property.Property_ID, Address, City, State, Postcode, Property.Office_Number, Owner.Owner_ID, Owner_Name, Percent_Owned FROM Property JOIN Property_Owner ON Property.Property_ID = Property_Owner.Property_ID JOIN Owner ON Property_Owner.Owner_ID = Owner.Owner_ID WHERE Property.Property_ID = ?");
    stmt.setInt(1, propertyId);

    ResultSet rs = stmt.executeQuery();
    if (rs.next()) {
        propertyIDInput.setText(Integer.toString(rs.getInt("Property_ID")));
        addressInput.setText(rs.getString("Address"));
        cityInput.setText(rs.getString("City"));
        stateInput.setText(rs.getString("State"));
        postcodeInput.setText(rs.getString("Postcode"));
        officeNumberInput.setText(Integer.toString(rs.getInt("Office_Number")));
        ownerIDInput.setText(Integer.toString(rs.getInt("Owner_ID")));
        ownerNameInput.setText(rs.getString("Owner_Name"));
        percentInput.setText(rs.getBigDecimal("Percent_Owned").toString());
    } else {
        JOptionPane.showMessageDialog(null, "No matching record found.");
    }
} catch (NumberFormatException ex) {
    JOptionPane.showMessageDialog(null, "Please enter a valid integer value for Property ID.");
} catch (SQLException ex) {
    JOptionPane.showMessageDialog(null, "Error searching for record: " + ex.getMessage());
}
connectToSql();
    }//GEN-LAST:event_searchButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
int selectedRowIndex = SQLTable.getSelectedRow();
if (selectedRowIndex < 0) {
    JOptionPane.showMessageDialog(null, "Please select a row to delete.");
    return;
}
int propertyId = (int) SQLTable.getValueAt(selectedRowIndex, 0);
try {
    PreparedStatement stmt1 = conn.prepareStatement("UPDATE Property SET Office_Number = (SELECT MIN(Office_Number) FROM Sales_Office) WHERE Property_ID = ?");
    stmt1.setInt(1, propertyId);
    stmt1.executeUpdate();
    PreparedStatement stmt2 = conn.prepareStatement("DELETE FROM Property_Owner WHERE Property_ID = ?");
    stmt2.setInt(1, propertyId);
    stmt2.executeUpdate();
    PreparedStatement stmt3 = conn.prepareStatement("DELETE FROM Property WHERE Property_ID = ?");
    stmt3.setInt(1, propertyId);
    int affectedRows = stmt3.executeUpdate();
    if (affectedRows > 0) {
        JOptionPane.showMessageDialog(null, "Record deleted successfully.");
    } else {
        JOptionPane.showMessageDialog(null, "Record not found or already deleted.");
    }
} catch (SQLException ex) {
    JOptionPane.showMessageDialog(null, "Error deleting record: " + ex.getMessage());
}
   connectToSql();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        propertyIDInput.setText("");
        addressInput.setText("");
        cityInput.setText("");
        stateInput.setText("");
        postcodeInput.setText("");
        officeNumberInput.setText("");
        ownerIDInput.setText("");
        ownerNameInput.setText("");
        percentInput.setText("");
        ownerDeleteInput.setText("");
    }//GEN-LAST:event_clearButtonActionPerformed

    private void SQLTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SQLTableMouseClicked
    int row = SQLTable.getSelectedRow();
    propertyIDInput.setText(SQLTable.getValueAt(row, 0).toString());
    addressInput.setText(SQLTable.getValueAt(row, 1).toString());
    cityInput.setText(SQLTable.getValueAt(row, 2).toString());
    stateInput.setText(SQLTable.getValueAt(row, 3).toString());
    postcodeInput.setText(SQLTable.getValueAt(row, 4).toString());
    officeNumberInput.setText(SQLTable.getValueAt(row, 5).toString());
    ownerIDInput.setText(SQLTable.getValueAt(row, 6).toString());
    ownerNameInput.setText(SQLTable.getValueAt(row, 7).toString());
    percentInput.setText(SQLTable.getValueAt(row, 8).toString());
    }//GEN-LAST:event_SQLTableMouseClicked

    private void ownerDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ownerDeleteButtonActionPerformed
    int ownerId = Integer.parseInt(ownerDeleteInput.getText());
    String sql = "DELETE FROM Owner WHERE Owner_ID = ?";
    try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
        pstmt.setInt(1, ownerId);
        int rowsDeleted = pstmt.executeUpdate();
        if (rowsDeleted > 0) {
            JOptionPane.showMessageDialog(null, "Owner with ID " + ownerId + " was deleted successfully!");
        } else {
            JOptionPane.showMessageDialog(null, "No owner with ID " + ownerId + " found!");
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(null, "Error deleting record: " + ex.getMessage());
    }

    connectToSql();
    }//GEN-LAST:event_ownerDeleteButtonActionPerformed

    private void refreshButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButton1ActionPerformed
    connectToSql();
    }//GEN-LAST:event_refreshButton1ActionPerformed

    public static void main(String args[]) {

        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>


        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable SQLTable;
    private javax.swing.JTextField addressInput;
    private javax.swing.JTextField cityInput;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton exitButton;
    private javax.swing.JButton insertButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField officeNumberInput;
    private javax.swing.JButton ownerDeleteButton;
    private javax.swing.JTextField ownerDeleteInput;
    private javax.swing.JTextField ownerIDInput;
    private javax.swing.JTextField ownerNameInput;
    private javax.swing.JTextField percentInput;
    private javax.swing.JTextField postcodeInput;
    private javax.swing.JTextField propertyIDInput;
    private javax.swing.JButton refreshButton1;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField stateInput;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
